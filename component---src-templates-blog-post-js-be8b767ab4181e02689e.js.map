{"version":3,"sources":["webpack://gatsby-starter-mix/./src/templates/blog-post.js"],"names":["data","location","post","markdownRemark","siteTitle","site","siteMetadata","title","AuthorName","author","name","siteUrl","previous","next","frontmatter","description","excerpt","className","itemScope","itemType","itemProp","style","paddingRight","date","tags","map","tag","index","Link","key","to","length","dangerouslySetInnerHTML","__html","html","display","flexWrap","justifyContent","listStyle","padding","fields","slug","rel"],"mappings":"0LAsFA,UA/EyB,SAAC,GAAwB,IAAD,EAArBA,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SAC1BC,EAAOF,EAAKG,eACZC,GAAY,UAAAJ,EAAKK,KAAKC,oBAAV,eAAwBC,QAAxB,QACZC,EAAaR,EAAKK,KAAKC,aAAaG,OAAOC,KAC3CC,EAAUX,EAAKK,KAAKC,aAAaK,QAC/BC,EAAmBZ,EAAnBY,SAAUC,EAASb,EAATa,KAElB,OACE,gBAAC,IAAD,CAAQZ,SAAUA,EAAUM,MAAOH,EAAWK,OAAQD,EAAYG,QAASA,GACzE,gBAAC,IAAD,CACEJ,MAAOL,EAAKY,YAAYP,MACxBQ,YAAab,EAAKY,YAAYC,aAAeb,EAAKc,UAEpD,2BACEC,UAAU,YACVC,WAAS,EACTC,SAAS,6BAET,8BACE,gBAAC,IAAD,CAAcC,SAAS,YACpBlB,EAAKY,YAAYP,OAEpB,uBAAKU,UAAU,iBACb,wBAAMI,MAAO,CAAEC,aAAc,SAAWpB,EAAKY,YAAYS,MACxDrB,EAAKY,YAAYU,KAChB,gBAAC,WAAD,KACGtB,EAAKY,YAAYU,KAAKC,KAAI,SAACC,EAAKC,GAAN,OACzB,gBAAC,EAAAC,KAAD,CACEC,IAAKH,EACLI,GAAE,QAAUJ,EACZT,UAAU,OAHZ,IAKQS,EACLC,EAAQ,IAAMzB,EAAKY,YAAYU,KAAKO,OAAS,KAAO,SAIzD,OAGR,2BACEC,wBAAyB,CAAEC,OAAQ/B,EAAKgC,MACxCd,SAAS,gBAEX,2BACA,8BACE,6BAGJ,uBAAKH,UAAU,iBACb,sBACEI,MAAO,CACLc,QAAQ,OACRC,SAAS,OACTC,eAAe,gBACfC,UAAU,OACVC,QAAS,IAGX,0BACG3B,GACC,gBAAC,EAAAgB,KAAD,CAAME,GAAIlB,EAAS4B,OAAOC,KAAMC,IAAI,QAApC,KACK9B,EAASE,YAAYP,QAI9B,0BACGM,GACC,gBAAC,EAAAe,KAAD,CAAME,GAAIjB,EAAK2B,OAAOC,KAAMC,IAAI,QAC7B7B,EAAKC,YAAYP,MADpB","file":"component---src-templates-blog-post-js-be8b767ab4181e02689e.js","sourcesContent":["import * as React from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport MarkerHeader from \"../components/MarkerHeader\"\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\n\nconst BlogPostTemplate = ({ data, location }) => {\n  const post = data.markdownRemark\n  const siteTitle = data.site.siteMetadata?.title || `Title`\n  const AuthorName = data.site.siteMetadata.author.name\n  const siteUrl = data.site.siteMetadata.siteUrl\n  const { previous, next } = data\n\n  return (\n    <Layout location={location} title={siteTitle} author={AuthorName} siteUrl={siteUrl}>\n      <SEO\n        title={post.frontmatter.title}\n        description={post.frontmatter.description || post.excerpt}\n      />\n      <article\n        className=\"blog-post\"\n        itemScope\n        itemType=\"http://schema.org/Article\"\n      >\n        <header>\n          <MarkerHeader itemProp=\"headline\">\n            {post.frontmatter.title}\n          </MarkerHeader>\n          <div className=\"date-with-tag\">\n            <span style={{ paddingRight: \"10px\" }}>{post.frontmatter.date}</span>\n            {post.frontmatter.tags ? (\n              <React.Fragment>\n                {post.frontmatter.tags.map((tag, index) => (\n                  <Link\n                    key={tag}\n                    to={`/tag/${tag}`}\n                    className=\"tag\"\n                  >\n                    {`#`}{tag}\n                    {index + 1 === post.frontmatter.tags.length ? null : ' '}\n                  </Link>\n                ))}\n              </React.Fragment>\n            ) : null}\n          </div>\n        </header>\n        <section\n          dangerouslySetInnerHTML={{ __html: post.html }}\n          itemProp=\"articleBody\"\n        />\n        <hr />\n        <footer>\n          <br />\n        </footer>\n      </article>\n      <nav className=\"blog-post-nav\">\n        <ul\n          style={{\n            display: `flex`,\n            flexWrap: `wrap`,\n            justifyContent: `space-between`,\n            listStyle: `none`,\n            padding: 0,\n          }}\n        >\n          <li>\n            {previous && (\n              <Link to={previous.fields.slug} rel=\"prev\">\n                « {previous.frontmatter.title}\n              </Link>\n            )}\n          </li>\n          <li>\n            {next && (\n              <Link to={next.fields.slug} rel=\"next\">\n                {next.frontmatter.title} »\n              </Link>\n            )}\n          </li>\n        </ul>\n      </nav>\n    </Layout>\n  )\n}\n\nexport default BlogPostTemplate\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug(\n    $id: String!\n    $previousPostId: String\n    $nextPostId: String\n  ) {\n    site {\n      siteMetadata {\n        title\n        author {\n          name\n        }\n        siteUrl\n      }\n    }\n    markdownRemark(id: { eq: $id }) {\n      id\n      excerpt(pruneLength: 160)\n      html\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        description\n        tags\n      }\n    }\n    previous: markdownRemark(id: { eq: $previousPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n    next: markdownRemark(id: { eq: $nextPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n  }\n`\n"],"sourceRoot":""}