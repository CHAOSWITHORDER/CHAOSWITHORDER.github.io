{"version":3,"sources":["webpack://gatsby-starter-mix/./src/components/ArticleLink.js","webpack://gatsby-starter-mix/./src/templates/tags.js"],"names":["ArticleLink","styled","BlogIndex","render","data","this","props","siteTitle","site","siteMetadata","title","posts","allMarkdownRemark","nodes","pageContext","totalPage","currentPage","tag","location","style","listStyle","map","post","frontmatter","fields","slug","className","itemScope","itemType","Link","to","itemProp","paddingRight","date","tags","index","key","length","dangerouslySetInnerHTML","__html","excerpt","display","flexWrap","justifyContent","padding","rel","React"],"mappings":"6IAEMA,E,QAAcC,OAAH,qfAuBjB,O,mHCjBMC,E,6FACJC,OAAA,WACE,IAAQC,EAASC,KAAKC,MAAdF,KACFG,EAAYH,EAAKI,KAAKC,aAAaC,OAAvB,QACZC,EAAQP,EAAKQ,kBAAkBC,MACrC,EAAwCR,KAAKC,MAAMQ,YAA3CC,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,YAAaC,EAAhC,EAAgCA,IAEhC,OACE,gBAAC,IAAD,CAAQC,SAAUb,KAAKC,MAAMY,SAAUR,MAAOH,GAC5C,gBAAC,IAAD,CAAKG,MAAOH,IACZ,sBAAIY,MAAO,CAAEC,UAAU,SACpBT,EAAMU,KAAI,SAAAC,GACT,IAAMZ,EAAQY,EAAKC,YAAYb,OAASY,EAAKE,OAAOC,KACpD,OACE,2BACEC,UAAU,iBACVC,WAAS,EACTC,SAAS,6BAET,gBAAC,EAAAC,KAAD,CAAMC,GAAIR,EAAKE,OAAOC,KAAMM,SAAS,OACnC,gBAAC,IAAD,CAAcA,SAAS,YACrB,gBAAC,IAAD,KAAcrB,KAGlB,uBAAKgB,UAAU,iBACb,wBAAMP,MAAO,CAAEa,aAAc,SAAWV,EAAKC,YAAYU,MACxDX,EAAKC,YAAYW,KAChB,gBAAC,WAAD,KACGZ,EAAKC,YAAYW,KAAKb,KAAI,SAACJ,EAAKkB,GAAN,OACzB,gBAAC,EAAAN,KAAD,CACEO,IAAKnB,EACLa,GAAE,QAAUb,EACZS,UAAU,OAHZ,IAKQT,EACLkB,EAAQ,IAAMb,EAAKC,YAAYW,KAAKG,OAAS,KAAO,SAIzD,MAEN,qBAAGC,wBAAyB,CAAEC,OAAQjB,EAAKkB,gBAKnD,uBACErB,MAAO,CACLsB,QAAS,OACTC,SAAU,OACVC,eAAgB,gBAChBvB,UAAW,OACXwB,QAAS,IAGX,2BACG5B,EAAc,EAAI,GACjB,gBAAC,EAAAa,KAAD,CACEC,GAAI,OAAOb,EAAP,KAAiBD,EAAc,GAAM,EAAI,GAAKA,EAAc,GAChE6B,IAAI,QAFN,UAQJ,2BACG7B,EAAc,GAAKD,GAClB,gBAAC,EAAAc,KAAD,CAAMC,GAAI,OAAOb,EAAP,KAAiBD,EAAc,GAAI6B,IAAI,QAAjD,a,GAnEUC,aA8ExB","file":"component---src-templates-tags-js-0af74810f30f0c43e2f2.js","sourcesContent":["import styled from \"@emotion/styled\"\n\nconst ArticleLink = styled.span`\n  color: black;\n  text-decoration: none;\n  display: inline-block;\n  position: relative;\n  ::after {\n    content: \"\";\n    position: absolute;\n    width: 100%;\n    transform: scaleX(0);\n    height: 2px;\n    bottom: 0;\n    left: 0;\n    background-color: rgba(0, 0, 0, 0.8);\n    transform-origin: bottom right;\n    transition: transform 0.4s cubic-bezier(0.86, 0, 0.07, 1);\n  }\n  :hover::after {\n    transform: scaleX(1);\n    transform-origin: bottom left;\n  }\n`\n\nexport default ArticleLink;","import React from 'react'\nimport { Link, graphql } from 'gatsby'\n\nimport MarkerHeader from \"../components/MarkerHeader\"\nimport ArticleLink from \"../components/ArticleLink\"\nimport Layout from '../components/layout'\nimport SEO from \"../components/seo\"\n\nclass BlogIndex extends React.Component {\n  render() {\n    const { data } = this.props\n    const siteTitle = data.site.siteMetadata.title || `Title`\n    const posts = data.allMarkdownRemark.nodes\n    const { totalPage, currentPage, tag } = this.props.pageContext\n\n    return (\n      <Layout location={this.props.location} title={siteTitle}>\n        <SEO title={siteTitle} />\n        <ol style={{ listStyle: `none` }}>\n          {posts.map(post => {\n            const title = post.frontmatter.title || post.fields.slug\n            return (\n              <article\n                className=\"post-list-item\"\n                itemScope\n                itemType=\"http://schema.org/Article\"\n              >\n                <Link to={post.fields.slug} itemProp=\"url\">\n                  <MarkerHeader itemProp=\"headline\">\n                    <ArticleLink>{title}</ArticleLink>\n                  </MarkerHeader>\n                </Link>\n                <div className=\"date-with-tag\">\n                  <span style={{ paddingRight: \"10px\" }}>{post.frontmatter.date}</span>\n                  {post.frontmatter.tags ? (\n                    <React.Fragment>\n                      {post.frontmatter.tags.map((tag, index) => (\n                        <Link\n                          key={tag}\n                          to={`/tag/${tag}`}\n                          className=\"tag\"\n                        >\n                          {`#`}{tag}\n                          {index + 1 === post.frontmatter.tags.length ? null : ' '}\n                        </Link>\n                      ))}\n                    </React.Fragment>\n                  ) : null}\n                </div>\n                <p dangerouslySetInnerHTML={{ __html: post.excerpt }} />\n              </article>\n            )\n          })}\n        </ol>\n        <div\n          style={{\n            display: 'flex',\n            flexWrap: 'wrap',\n            justifyContent: 'space-between',\n            listStyle: 'none',\n            padding: 0,\n          }}\n        >\n          <div>\n            {currentPage - 1 > 0 && (\n              <Link\n                to={`tag/${tag}/` + (currentPage - 1 === 1 ? '' : currentPage - 1)}\n                rel=\"prev\"\n              >\n                « 上一页\n              </Link>\n            )}\n          </div>\n          <div>\n            {currentPage + 1 <= totalPage && (\n              <Link to={`tag/${tag}/` + (currentPage + 1)} rel=\"next\">\n                下一页 »\n              </Link>\n            )}\n          </div>\n        </div>\n      </Layout>\n    )\n  }\n}\n\nexport default BlogIndex\n\nexport const pageQuery = graphql`\n  query($tag: String!,$skip: Int!, $limit: Int!) {\n    site {\n      siteMetadata {\n        title\n        description\n      }\n    }\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { tags: { in: [$tag] } } }\n      limit: $limit\n      skip: $skip\n    ) {\n      nodes {\n        excerpt\n        fields {\n          slug\n        }\n        frontmatter {\n          date(formatString: \"MMMM DD, YYYY\")\n          title\n          tags\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}