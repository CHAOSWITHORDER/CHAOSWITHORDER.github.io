{"componentChunkName":"component---src-templates-blog-post-js","path":"/java-time-convert/","result":{"data":{"site":{"siteMetadata":{"title":"akliuxingyuan","author":{"name":"akliuxingyuan"},"siteUrl":"https://github.com/akliuxingyuan"}},"markdownRemark":{"id":"ccd6d4a6-5dd2-50f4-97ea-62ae7d18873b","excerpt":"1.什么是SimpleDateFormat 在java doc对SimpleDateFormat的解释如下:  is a concrete class for formatting and parsing dates in a locale-sensitive manner. It allows for…","html":"<h1>1.什么是SimpleDateFormat</h1>\n<p>在java doc对SimpleDateFormat的解释如下:</p>\n<p><code class=\"language-text\">SimpleDateFormat</code> is a concrete class for formatting and parsing dates in a locale-sensitive manner. It allows for formatting\n(date → text), parsing (text → date), and normalization.</p>\n<p><code class=\"language-text\">SimpleDateFormat</code>是一个用来对位置敏感的格式化和解析日期的实体类。他允许把日期格式化成text，把text解析成日期和规范化。</p>\n<h2>1.1使用SimpleDateFormat</h2>\n<p>simpleDateFormat的使用方法比较简单:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">SimpleDateFormat</span> simpleDateFormat <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleDateFormat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yyyy-MM-dd HH:mm:ss\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>simpleDateFormat<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>simpleDateFormat<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2018-07-09 11:10:21\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>1.首先需要定义一个日期的pattern,这里我们定义的是”yyyy-mm-dd HH:mm:ss” ，也就是我们这个simpleDateFormat不管是格式化还是解析都需要按照这个pattern。</p>\n<p>2.对于format需要传递Date的对象，会返回一个String类型，这个String会按照我们上面的格式生成。</p>\n<p>3.对于parse需要传递一个按照上面pattern的字符串，如果传递错误的pattern会抛出java.text.ParseException异常，如果传递正确的会生成一个Date对象。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">附：格式占位符\nG 年代标志符\ny 年\nM 月\nd 日\nh 时 在上午或下午 (1~12)\nH 时 在一天中 (0~23)\nm 分\ns 秒\nS 毫秒\nE 星期\nD 一年中的第几天\nF 一月中第几个星期几\nw 一年中第几个星期\nW 一月中第几个星期\na 上午 / 下午 标记符\nk 时 在一天中 (1~24)\nK 时 在上午或下午 (0~11)\nz 时区</code></pre></div>\n<h1>2.SimpleDateFormat的隐患</h1>\n<p>很多初学者，或者一些经验比较浅的java开发工程师，用SimpleDateFormat会出现一些奇奇怪怪的BUG。</p>\n<p>1.结果值不对：转换的结果值经常会出人意料，和预期不同，往往让很多人摸不着头脑。</p>\n<p>2.内存泄漏: 由于转换的结果值不对，后续的一些操作，如一个循环，累加一天处理一个东西，但是生成的日期如果异常导致很大的话，会让这个循环变成一个类似死循环一样导致系统内存泄漏，频繁触发GC，造成系统不可用。</p>\n<p>为什么会出现这么多问题呢？因为SimpleDateFormat线程不安全，很多人都会写个Util类，然后把SimpleDateFormat定义成全局的一个常量，所有线程都共享这个常量:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">protected</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">SimpleDateFormat</span> dayFormat <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleDateFormat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yyyy-MM-dd\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Date</span> <span class=\"token function\">formatDate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> date<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ParseException</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> dayFormat<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>为什么SimpleDateFormat会线程不安全呢，在SimpleDateFormat源码中,所有的格式化和解析都需要通过一个中间对象进行转换，那就是Calendar，而这个也是我们出现线程不安全的罪魁祸首，试想一下当我们有多个线程操作同一个Calendar的时候后来的线程会覆盖先来线程的数据，那最后其实返回的是后来线程的数据，这样就导致我们上面所述的BUG的产生：</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// Called from Format after creating a FieldDelegate</span>\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">StringBuffer</span> <span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Date</span> date<span class=\"token punctuation\">,</span> <span class=\"token class-name\">StringBuffer</span> toAppendTo<span class=\"token punctuation\">,</span><span class=\"token class-name\">FieldDelegate</span> delegate<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Convert input date to time field list</span>\n    calendar<span class=\"token punctuation\">.</span><span class=\"token function\">setTime</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">boolean</span> useDateFormatSymbols <span class=\"token operator\">=</span> <span class=\"token function\">useDateFormatSymbols</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> compiledPattern<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> tag <span class=\"token operator\">=</span> compiledPattern<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">>>></span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> compiledPattern<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xff</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">==</span> <span class=\"token number\">255</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            count <span class=\"token operator\">=</span> compiledPattern<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span>\n            count <span class=\"token operator\">|=</span> compiledPattern<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>tag<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">case</span> TAG\\_QUOTE\\_ASCII_CHAR<span class=\"token operator\">:</span>\n                toAppendTo<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">case</span> TAG\\_QUOTE\\_CHARS<span class=\"token operator\">:</span>\n                toAppendTo<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>compiledPattern<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                i <span class=\"token operator\">+=</span> count<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n                <span class=\"token function\">subFormat</span><span class=\"token punctuation\">(</span>tag<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">,</span> delegate<span class=\"token punctuation\">,</span> toAppendTo<span class=\"token punctuation\">,</span> useDateFormatSymbols<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> toAppendTo<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<img src=\"https://user-gold-cdn.xitu.io/2018/7/18/164ada6def13ed96?w=1150&amp;h=1218&amp;f=png&amp;s=614095\" width=\"60%\" height=\"auto/\">\n<h1>3.如何避坑</h1>\n<p>对于SimpleDateFormat的解决方法有下面几种:</p>\n<h2>3.1新建SimpleDateFormat</h2>\n<p>上面出现Bug的原因是因为所有线程都共用一个SimpleDateFormat，这里有个比较好解决的办法，每次使用的时候都创建一个新的SimpleDateFormat,我们可以在DateUtils中将创建SimpleDateFormat放在方法内部:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Date</span> <span class=\"token function\">formatDate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> date<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ParseException</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">SimpleDateFormat</span> dayFormat <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleDateFormat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yyyy-MM-dd\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> dayFormat<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>上面这个方法虽然能解决我们的问题但是引入了另外一个问题就是，如果这个方法使用量比较大，有可能会频繁造成Young gc，整个系统还是会受一定的影响。</p>\n<h2>3.2使用ThreadLocal</h2>\n<p>使用ThreadLocal能避免上面频繁的造成Young gc，我们对每个线程都使用ThreadLocal进行保存，由于ThreadLocal是线程之间隔离开的，所以不会出现线程安全问题:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">ThreadLocal</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SimpleDateFormat</span><span class=\"token punctuation\">></span></span> simpleDateFormatThreadLocal <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadLocal</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Date</span> <span class=\"token function\">formatDate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> date<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ParseException</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">SimpleDateFormat</span> dayFormat <span class=\"token operator\">=</span> <span class=\"token function\">getSimpleDateFormat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> dayFormat<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">SimpleDateFormat</span> <span class=\"token function\">getSimpleDateFormat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">SimpleDateFormat</span> simpleDateFormat <span class=\"token operator\">=</span> simpleDateFormatThreadLocal<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>simpleDateFormat <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        simpleDateFormat <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleDateFormat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yyyy-mm-dd  HH:mm:ss\"</span><span class=\"token punctuation\">)</span>\n        simpleDateFormatThreadLocal<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>simpleDateFormat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> simpleDateFormat<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>3.3使用第三方工具包</h2>\n<p>虽然上面的ThreadLocal能解决我们出现的问题，但是第三方工具包提供的功能更加强大,在java中有两个类库比较出名一个是Joda-Time，一个是Apache common包</p>\n<h3>3.3.1 Joda-Time(推荐)</h3>\n<p>Joda-Time 令时间和日期值变得易于管理、操作和理解。对于我们复杂的操作都可以使用Joda-Time操作，下面我列举两个例子,对于把日期加上90天，如果使用原生的Jdk我们需要这样写:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Calendar</span> calendar <span class=\"token operator\">=</span> <span class=\"token class-name\">Calendar</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncalendar<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">2000</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Calendar</span><span class=\"token punctuation\">.</span>JANUARY<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">SimpleDateFormat</span> sdf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleDateFormat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"E MM/dd/yyyy HH:mm:ss.SSS\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncalendar<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Calendar</span><span class=\"token punctuation\">.</span>DAY\\_OF\\_MONTH<span class=\"token punctuation\">,</span> <span class=\"token number\">90</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>sdf<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span>calendar<span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>但是在我们的joda-time中只需要两句话，并且api也比较通俗易懂，所以你为什么不用Joda-Time呢？</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">DateTime</span> dateTime <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DateTime</span><span class=\"token punctuation\">(</span><span class=\"token number\">2000</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>dateTime<span class=\"token punctuation\">.</span><span class=\"token function\">plusDays</span><span class=\"token punctuation\">(</span><span class=\"token number\">90</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"E MM/dd/yyyy HH:mm:ss.SSS\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>3.3.2 common-lang包</h3>\n<p>在common-lang包中有个类叫FastDateFormat，由于common-lang这个包基本被很多Java项目都会引用，所以你可以不用专门去引用处理时间包，即可处理时间，在FastDateFormat中每次处理时间的时候会创建一个calendar,使用方法比较简单代码如下所示:</p>\n<p>FastDateFormat.getInstance().format(new Date());</p>\n<h2>3.4升级jdk8(推荐)</h2>\n<p>在java8中Date这个类中的很多方法包括构造方法都被打上了@Deprecated废弃的注解，取而代之的是LocalDateTime,LocalDate LocalTime这三个类：</p>\n<ul>\n<li><em>LocalDate无法包含时间；</em></li>\n<li><em>LocalTime无法包含日期；</em></li>\n<li><em>LocalDateTime才能同时包含日期和时间。</em></li>\n</ul>\n<p>如果你是Java8，那你一定要使用他，在日期的格式化和解析方面不用考虑线程安全性，代码如下:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">formatTime</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LocalDateTime</span> time<span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span> pattern<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DateTimeFormatter</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofPattern</span><span class=\"token punctuation\">(</span>pattern<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>​</p>\n<p>当然localDateTime是java8的一大亮点，当然不仅仅只是解决了线程安全的问题，同样也提供了一些其他的运算比如加减天数:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">//日期加上一个数,根据field不同加不同值,field为ChronoUnit.*</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">LocalDateTime</span> <span class=\"token function\">plus</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LocalDateTime</span> time<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> number<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TemporalUnit</span> field<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">plus</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">,</span> field<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n​<span class=\"token comment\">//日期减去一个数,根据field不同减不同值,field参数为ChronoUnit.*</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">LocalDateTime</span> <span class=\"token function\">minu</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LocalDateTime</span> time<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> number<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TemporalUnit</span> field<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">minus</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">,</span>field<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>最后，如果你担心使用LocalDateTime 会对你现有的代码产生很大的改变的话，那你可以将他们两进行互转:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">//Date转换为LocalDateTime</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">LocalDateTime</span> <span class=\"token function\">convertDateToLDT</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Date</span> date<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token class-name\">LocalDateTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofInstant</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">.</span><span class=\"token function\">toInstant</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ZoneId</span><span class=\"token punctuation\">.</span><span class=\"token function\">systemDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n​<span class=\"token comment\">//LocalDateTime转换为Date</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Date</span> <span class=\"token function\">convertLDTToDate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LocalDateTime</span> time<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span><span class=\"token function\">atZone</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ZoneId</span><span class=\"token punctuation\">.</span><span class=\"token function\">systemDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toInstant</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"title":"Java 中的时间转换","date":"March 26, 2021","description":null,"tags":["Java","Date","Format"]}},"previous":{"fields":{"slug":"/new-beginnings/"},"frontmatter":{"title":"New Beginnings"}},"next":null},"pageContext":{"id":"ccd6d4a6-5dd2-50f4-97ea-62ae7d18873b","previousPostId":"2989d646-2802-5312-a52e-e7766d8761fa","nextPostId":null}},"staticQueryHashes":["3000541721","3274528899"]}