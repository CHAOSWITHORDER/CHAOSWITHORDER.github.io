{"version":3,"sources":["webpack://gatsby-starter-mix/./src/components/ArticleLink.js","webpack://gatsby-starter-mix/./src/templates/index.js"],"names":["ArticleLink","styled","BlogIndex","render","data","this","props","siteTitle","site","siteMetadata","title","posts","allMarkdownRemark","nodes","location","AuthorName","author","name","siteUrl","pageContext","totalPage","currentPage","length","style","listStyle","map","post","frontmatter","fields","slug","key","className","itemScope","itemType","Link","to","itemProp","paddingRight","date","tags","tag","index","dangerouslySetInnerHTML","__html","description","excerpt","display","flexWrap","justifyContent","padding","rel","React"],"mappings":"6IAEMA,E,QAAcC,OAAH,qfAuBjB,O,mHChBMC,E,6FACJC,OAAA,WAAU,IAAD,EACCC,EAASC,KAAKC,MAAdF,KACFG,GAAY,UAAAH,EAAKI,KAAKC,oBAAV,eAAwBC,QAAxB,QACZC,EAAQP,EAAKQ,kBAAkBC,MAC/BC,EAAWT,KAAKC,MAChBS,EAAaX,EAAKI,KAAKC,aAAaO,OAAOC,KAC3CC,EAAUd,EAAKI,KAAKC,aAAaS,QACvC,EAAmCb,KAAKC,MAAMa,YAAtCC,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,YAEnB,OAAqB,IAAjBV,EAAMW,OAEN,gBAAC,IAAD,CAAQR,SAAUA,EAAUJ,MAAOH,EAAWS,OAAQD,EAAYG,QAASA,GACzE,gBAAC,IAAD,CAAKR,MAAOH,IACZ,uLAUJ,gBAAC,IAAD,CAAQO,SAAUA,EAAUJ,MAAOH,EAAWS,OAAQD,EAAYG,QAASA,GACzE,gBAAC,IAAD,CAAKR,MAAOH,IACZ,sBAAIgB,MAAO,CAAEC,UAAU,SACpBb,EAAMc,KAAI,SAAAC,GACT,IAAMhB,EAAQgB,EAAKC,YAAYjB,OAASgB,EAAKE,OAAOC,KACpD,OACE,sBAAIC,IAAKJ,EAAKE,OAAOC,MACnB,2BACEE,UAAU,iBACVC,WAAS,EACTC,SAAS,6BAET,8BACE,gBAAC,EAAAC,KAAD,CAAMC,GAAIT,EAAKE,OAAOC,KAAMO,SAAS,OACnC,gBAAC,IAAD,CAAcA,SAAS,YACrB,gBAAC,IAAD,KAAc1B,KAGlB,uBAAKqB,UAAU,iBACb,wBAAMR,MAAO,CAAEc,aAAc,SAAWX,EAAKC,YAAYW,MACxDZ,EAAKC,YAAYY,KAChB,gBAAC,WAAD,KACGb,EAAKC,YAAYY,KAAKd,KAAI,SAACe,EAAKC,GAAN,OACzB,gBAAC,EAAAP,KAAD,CACEJ,IAAKU,EACLL,GAAE,QAAUK,EACZT,UAAU,OAHZ,IAKQS,EACLC,EAAQ,IAAMf,EAAKC,YAAYY,KAAKjB,OAAS,KAAO,SAIzD,OAGR,+BACE,qBACEoB,wBAAyB,CACvBC,OAAQjB,EAAKC,YAAYiB,aAAelB,EAAKmB,SAE/CT,SAAS,uBASvB,uBACEb,MAAO,CACLuB,QAAS,OACTC,SAAU,OACVC,eAAgB,gBAChBxB,UAAW,OACXyB,QAAS,IAGX,2BACG5B,EAAc,EAAI,GACjB,gBAAC,EAAAa,KAAD,CACEC,GAAI,KAAOd,EAAc,GAAM,EAAI,GAAK,QAAUA,EAAc,GAChE6B,IAAI,QAFN,gBAQJ,2BACG7B,EAAc,GAAKD,GAClB,gBAAC,EAAAc,KAAD,CAAMC,GAAI,UAAYd,EAAc,GAAI6B,IAAI,QAA5C,mB,GA/FUC,aA0GxB","file":"component---src-templates-index-js-f16866269e76208c4b47.js","sourcesContent":["import styled from \"@emotion/styled\"\n\nconst ArticleLink = styled.span`\n  color: black;\n  text-decoration: none;\n  display: inline-block;\n  position: relative;\n  ::after {\n    content: \"\";\n    position: absolute;\n    width: 100%;\n    transform: scaleX(0);\n    height: 2px;\n    bottom: 0;\n    left: 0;\n    background-color: rgba(0, 0, 0, 0.8);\n    transform-origin: bottom right;\n    transition: transform 0.4s cubic-bezier(0.86, 0, 0.07, 1);\n  }\n  :hover::after {\n    transform: scaleX(1);\n    transform-origin: bottom left;\n  }\n`\n\nexport default ArticleLink;","import * as React from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport MarkerHeader from \"../components/MarkerHeader\"\nimport ArticleLink from \"../components/ArticleLink\"\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\n\n\nclass BlogIndex extends React.Component {\n  render() {\n    const { data } = this.props\n    const siteTitle = data.site.siteMetadata?.title || `Title`\n    const posts = data.allMarkdownRemark.nodes\n    const location = this.props\n    const AuthorName = data.site.siteMetadata.author.name\n    const siteUrl = data.site.siteMetadata.siteUrl\n    const { totalPage, currentPage } = this.props.pageContext\n\n    if (posts.length === 0) {\n      return (\n        <Layout location={location} title={siteTitle} author={AuthorName} siteUrl={siteUrl}>\n          <SEO title={siteTitle} />\n          <p>\n            No blog posts found. Add markdown posts to \"content/blog\" (or the\n            directory you specified for the \"gatsby-source-filesystem\" plugin in\n            gatsby-config.js).\n        </p>\n        </Layout>\n      )\n    }\n\n    return (\n      <Layout location={location} title={siteTitle} author={AuthorName} siteUrl={siteUrl}>\n        <SEO title={siteTitle} />\n        <ol style={{ listStyle: `none` }}>\n          {posts.map(post => {\n            const title = post.frontmatter.title || post.fields.slug\n            return (\n              <li key={post.fields.slug}>\n                <article\n                  className=\"post-list-item\"\n                  itemScope\n                  itemType=\"http://schema.org/Article\"\n                >\n                  <header>\n                    <Link to={post.fields.slug} itemProp=\"url\">\n                      <MarkerHeader itemProp=\"headline\">\n                        <ArticleLink>{title}</ArticleLink>\n                      </MarkerHeader>\n                    </Link>\n                    <div className=\"date-with-tag\">\n                      <span style={{ paddingRight: \"10px\" }}>{post.frontmatter.date}</span>\n                      {post.frontmatter.tags ? (\n                        <React.Fragment>\n                          {post.frontmatter.tags.map((tag, index) => (\n                            <Link\n                              key={tag}\n                              to={`/tag/${tag}`}\n                              className=\"tag\"\n                            >\n                              {`#`}{tag}\n                              {index + 1 === post.frontmatter.tags.length ? null : ' '}\n                            </Link>\n                          ))}\n                        </React.Fragment>\n                      ) : null}\n                    </div>\n                  </header>\n                  <section>\n                    <p\n                      dangerouslySetInnerHTML={{\n                        __html: post.frontmatter.description || post.excerpt,\n                      }}\n                      itemProp=\"description\"\n                    />\n                  </section>\n                </article>\n              </li>\n            )\n          })}\n        </ol>\n\n        <div\n          style={{\n            display: 'flex',\n            flexWrap: 'wrap',\n            justifyContent: 'space-between',\n            listStyle: 'none',\n            padding: 0,\n          }}\n        >\n          <div>\n            {currentPage - 1 > 0 && (\n              <Link\n                to={'/' + (currentPage - 1 === 1 ? '' : 'page/' + currentPage - 1)}\n                rel=\"prev\"\n              >\n                « Prev Page\n              </Link>\n            )}\n          </div>\n          <div>\n            {currentPage + 1 <= totalPage && (\n              <Link to={'/page/' + (currentPage + 1)} rel=\"next\">\n                Next Page »\n              </Link>\n            )}\n          </div>\n        </div>\n      </Layout>\n    )\n  }\n}\n\nexport default BlogIndex\n\nexport const pageQuery = graphql`\n  query($skip: Int!, $limit: Int!) {\n    site {\n      siteMetadata {\n        title\n        author {\n          name\n        }\n        siteUrl\n      }\n    }\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      limit: $limit\n      skip: $skip\n    ) {\n      nodes {\n        excerpt\n        fields {\n          slug\n        }\n        frontmatter {\n          date(formatString: \"MMMM DD, YYYY\")\n          title\n          description\n          tags\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}